#+STARTUP: indent
* Org Documented Emacs Configuration
** GUI
*** Disable Toolbar and Menubar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

*** Scroll Bar Mode
#+begin_src emacs-lisp
(scroll-bar-mode 1)
#+end_src

*** Transparent Window Frame
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 .50))
  (add-to-list 'default-frame-alist '(alpha . (85 .50)))
#+end_src

** Emacs System
*** Terminal
**** Set Default Shell to System Bash
#+begin_src emacs-lisp
(defvar my-term-shell "bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+end_src

*** Startup Buffer
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (add-hook 'after-init-hook
            (lambda ()
              (ansi-term "bash")))
#+end_src

*** Color Themes (autothemer)
#+begin_src emacs-lisp
  (use-package autothemer
    :ensure t)
#+end_src
*** Modeline
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'undo-tree-mode)
    (diminish 'org-indent-mode)
    (diminish 'undo-tree-mode)
    )
#+end_src

*** Line Numbers
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

*** Config edit/reload
**** edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src

**** reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

*** Kill Current buffer on C-x k
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src

*** Kill All Buffers
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+end_src

*** Autosaving and Temp files
#+begin_src emacs-lisp
  (setq make-back nil)
  (setq auto-save-default nil)
#+end_src

*** Confirmation Prompts
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Buffer Scrolling
#+begin_src emacs-lisp
;; Set the screen jump when scrolling
(setq scroll-conservatively 100)
#+end_src

*** Bell
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

*** Keybindings
**** Packages
#+begin_src emacs-lisp
;; which-key displays a helpful menu for emacs keybindings
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src

**** Bindings
#+begin_src emacs-lisp
;; Example of a global keybind
;; (global-set-key (kbd "<s-return>") 'ansi-term)
;; Swap super and meta keys for the HHKB if they aren't set in OS
;; (setq x-meta-keysym 'super
;;       x-super-keysym 'meta)
#+end_src

*** Evil
#+begin_src emacs-lisp
  ;; evil mode state at startup
  (use-package evil
    :ensure t
    :init
    :config
    (evil-mode 1)
    (setq evil-default-state 'emacs))
#+end_src

*** Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s e" . sudo-edit))
#+end_src

*** IDO (Interactive Do) Mode
**** Enable ido mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src

**** ido-vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

**** smex
Smex is a M-x enhancement built on top of IDO for MRU and MFU M-x commands.
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src

**** Switch Buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src

*** Faces/Fonts 
**** Conditional font on MacOS
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (set-face-attribute 'default nil :family "Dina")
    (set-face-attribute 'default nil :foundry nil)
    (set-face-attribute 'default nil :height 160)
    (set-face-attribute 'default nil :foreground nil)
    (set-face-attribute 'default nil :background nil))
#+end_src

*** Switch Windows
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src

*** Window Splitting Functions
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

*** dmenu
#+begin_src emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("C-M-SPC" . 'dmenu))
#+end_src

*** symon
#+begin_src emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("C-M-h" . symon-mode))
#+end_src

** Buffer Editing
*** Cursor
#+begin_src emacs-lisp
(when window-system (global-hl-line-mode t))
;; tiny package that helps find the cursor when switching buffers
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src

*** Line wrapping
*** Enable ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

*** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+end_src

*** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+end_src

*** EasyMotion for Emacs (avy)
Avy works like easymotion in vim. Bound to M-s.
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

*** Bracket and Quote Completion (electric)
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+end_src

*** Bracket Delimiting
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src

*** Sub-word motion
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

*** Kill Whole Word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word-strictly)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src

*** Copy Whole line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+end_src

*** Whitespace Greedy Deletion (hungry-delete)
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src

*** Completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

** Org Mode
*** Heading Indentation
#+begin_src emacs-lisp
  (org-indent-mode 1)
#+end_src

*** Code Editing Window
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

